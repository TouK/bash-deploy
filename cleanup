#!/bin/bash

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# This is a part of touk-bash.
# Developed by TouK.

if [ "x$TOUK_BASH_HOME" = "x" ]; then
    echo "You need to set up environment property TOUK_BASH_HOME to point to your TouK bash installation folder."
    echo "For example in your ~/.profile configuration file: TOUK_BASH_HOME=\"/home/$USER/dev/touk-bash\""
    exit 1
fi

# Includes
. "$TOUK_BASH_HOME/touk-bash-core.sh"
. "$TOUK_BASH_HOME/touk-bash-macos.sh"
. "$TOUK_BASH_HOME/touk-bash-git.sh"
. "$TOUK_BASH_HOME/touk-bash-gerrit.sh"

printHelp() {
    put "Usage:"
    put "$0 [-a | --all | branchName]"
    put ""
    put "Examples:"
    put "$0"
    put "$0 my_merged_branch"
    put "$0 -a"
    br
}

# Verifies that the specified branch is merged to the review branch on the review remote
# Args:
#   $1 - branches to be verified
branchesAreClosed() {
    lastReviewBranch=$(echo "$1" | grep _${reviewSuffix}_ | head -1 | cut -f 3- -d /)
    if [ "$lastReviewBranch" == "" ]; then
        return 1
    fi
    branchExistsOnRemote=$(git ls-remote --heads --quiet | grep $lastReviewBranch)
    if [ "$branchExistsOnRemote" == "" ]; then
        changeId=$(git log -1 $lastReviewBranch | grep "Change-Id:" | awk '{print $2}')
    else
        changeId=$(git log -1 ${reviewRemote}/$lastReviewBranch | grep "Change-Id:" | awk '{print $2}')
    fi

    isChangeMerged=$(git log $reviewBranch --grep=$changeId)
    if [ "$isChangeMerged" == "" ]; then
        return 1
    else
        exe git log $reviewBranch --grep=$changeId
        br
        put "Branch was reviewed here: ${reviewUrl}/#/q/${changeId}"
        hr
        return 0
    fi
}

# $1 - branches
printBranches() {
    for branch in $1
    do
        put "  $branch"
    done
}

# Cleans up a single topic branch merged to base branch by removing all related branches both locally and on the remote
# Args:
#   $1 - branch to be cleaned up
cleanupBranch() {
    put "Cleaning up $1 branch"
    br

    upstreamBranchesToDelete=$(git ls-remote --heads --quiet $reviewRemote | grep $1 | cut -f 2- | $SORT_COMMAND -r -V )
    localBranchesToDelete=$(git branch | awk -F ' +' '! /\(no branch\)/ {print $2}' | grep $1)

    put "Checking if branch $1 is merged to $reviewBranch with Gerrit"

    if branchesAreClosed "$upstreamBranchesToDelete" || branchesAreClosed "$localBranchesToDelete" ; then
        green "Branch is merged to $reviewBranch -> can be safely deleted"
    else
        warn "Branch is not merged to $reviewBranch, are you sure you want to delete it?"
        confirm
    fi

    put "You are about to delete locally and remotely following branches:"

    br
    put "From local:"
    printBranches "$localBranchesToDelete"

    br
    put "From ${reviewRemote}:"
    printBranches "$upstreamBranchesToDelete"

    confirm

    exe git checkout $reviewBranch

    deleteLocalBranches "$localBranchesToDelete"
    deleteUpstreamBranches "$upstreamBranchesToDelete" $reviewRemote
}

# Cleans up one branch merged to the base branch
# Args:
#   $1 - branch to be cleaned up
cleanupOne() {
    cleanupBranch $1
    finalize
}

# Cleans up all branches merged to the base branch
# Args: no-arg
cleanupAll() {
    put "Fetching branch info"
    exe git fetch -p $reviewRemote

    local branches=$(git ls-remote --heads --quiet | cut -f 2- | grep -v _${reviewSuffix}_)
    branchesToDelete=()
    for branch in $branches
    do
        put "Checking $branch"
        originBranchesToDelete=$(git ls-remote --heads --quiet $reviewRemote | grep ${branch} | cut -f 2- | $SORT_COMMAND -r -V )
        if branchesAreClosed "$originBranchesToDelete"; then
            branchesToDelete+=($branch)
        fi
    done

    if [ ${#branchesToDelete[@]} -eq 0 ] ; then
        br
        put "Already clean â˜º"
        exit 0
    fi

    br
    put "Branches to delete:"
    for branch in ${branchesToDelete[@]}
    do
        put "  $branch"
    done

    br
    put "Do you want to delete all those branches?"
    confirm

    for branch in ${branchesToDelete[@]}
    do
        localBranchName=$(echo $branch | awk '{split($0, b, "/"); print b[3]}')
        cleanupBranch $localBranchName
    done

    finalize
}

# Args: no-arg
finalize() {
    put "Prune old branches"
    exe git fetch -p $reviewRemote

    put "Done!"
}

## Real work starts here
obtainReviewBranch
obtainReviewRemote
obtainReviewUrl
obtainReviewSuffix
obtainCurrentBranch

case $# in
0)  cleanupOne $currentBranch ;;
1)  case $1 in
    --all | -a)  cleanupAll ;;
        --help)  printHelp ; exit 1 ;;
             *)  cleanupOne $1 ;;
    esac ;;
*)  printHelp ; exit 1 ;;
esac

exit 0
